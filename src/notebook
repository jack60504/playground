curl https://api.groq.com/openai/v1/chat/completions \
-H "Content-Type: application/json" \
-H "Authorization: Bearer $GROQ_API_KEY" \
-d '{
  "model": "llama3-groq-70b-8192-tool-use-preview",
  "messages": [
    {
      "role": "user",
      "content": "What'\''s the weather like in Boston today?"
    }
  ],
  "tools": [
    {
      "type": "function",
      "function": {
        "name": "get_current_weather",
        "description": "Get the current weather in a given location",
        "parameters": {
          "type": "object",
          "properties": {
            "location": {
              "type": "string",
              "description": "The city and state, e.g. San Francisco, CA"
            },
            "unit": {
              "type": "string",
              "enum": ["celsius", "fahrenheit"]
            }
          },
          "required": ["location"]
        }
      }
    }
  ],
  "tool_choice": "auto"
}'

import requests

api_url = "http://localhost:8000/v1/chat/completions"
headers = {
    "Content-Type": "application/json",
    "Authorization": "Bearer YOUR_API_KEY"
}

messages = [
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "What is 1234 * 5678?"}
]

# Define the function the model can call
functions = [
    {
        "name": "calculate",
        "description": "Perform a basic arithmetic operation: add, subtract, multiply, divide two numbers",
        "parameters": {
            "type": "object",
            "properties": {
                "operation": {"type": "string", "enum": ["add", "subtract", "multiply", "divide"]},
                "num1": {"type": "number"},
                "num2": {"type": "number"}
            },
            "required": ["operation", "num1", "num2"]
        }
    }
]

payload = {
    "model": "llama3.1-70b-instruct",
    "messages": messages,
    "functions": functions,
    # Encouraging the model to call the function if it can't directly answer
    "function_call": "auto"
}

response = requests.post(api_url, headers=headers, json=payload)
result = response.json()

print(result)

docker run -d -p 3000:8080 \
-v open-webui:/app/backend/data \
-e OPENAI_API_BASE_URLS="https://your-openai-endpoint.com/v1" \
-e OPENAI_API_KEYS="your_openai_api_key" \
--name open-webui \
--restart always \
ghcr.io/open-webui/open-webui:main



{
    "role": "system",
    "content": "You are a helpful assistant with tool-calling capabilities. 
  
  Available tools:
  1. **lookup**: This tool retrieves information based on a query.
     - **Parameters**: `query` (string) - The term or question to look up.
     - **Output**: A JSON object with a `result` field containing the retrieved information.
  
  When a user asks a question that requires external information, respond with a JSON tool call in the format:
  {\"name\": tool_name, \"parameters\": {\"parameter_name\": parameter_value}}.
  
  After receiving tool output, use it to provide a clear and concise answer to the user."
  }

  {
    "role": "user",
    "content": "What is the capital of France?"
  }

  <|start_header_id|>system<|end_header_id|>
  You are a helpful assistant capable of using tools to answer questions accurately.  
  You have access to the following tool(s):
  
  1. TOOL_NAME: 
     - Description: [Describe what the tool does, e.g., "Looks up factual information based on a query"]
     - Input Format: {"query": "string"}
     - Output Format: {"result": "string"}
  
  When the user asks a question that requires external information, do the following:
  1. Check if the question can be answered by using the TOOL_NAME.
  2. If yes, respond **only** with a JSON object calling the tool. For example:
     {"name": "TOOL_NAME", "parameters": {"query": "What is the capital of France?"}}
  
  3. Do not include explanations or additional text before or after the JSON object. Just provide the JSON tool call.
  
  When you receive the tool output (which will be returned as a separate message), you will then use that output to produce the final answer to the user. The final answer should be clear, concise, and directly address the userâ€™s request.
  
  Do not deviate from these instructions. Always return the final answer after you've received the tool output.
  
  <|eot_id|>
  
  <|start_header_id|>user<|end_header_id|>
  What is the capital of France?
  <|eot_id|>
   